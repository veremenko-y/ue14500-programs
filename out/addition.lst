ca65 V2.19 - Git d90cd11
Main file   : addition.s
Current file: addition.s

000000r 1               ; Yaroslav Veremenko 2024-05-20
000000r 1               ; Simple 2 bit addition example
000000r 1               ;
000000r 1               ; Assume little-endian bit packing.
000000r 1               ; E.g. 4 bit number 1 = 0b1011 is going to be stored in
000000r 1               ; memory as lowest bit first.
000000r 1               ; 00:1b
000000r 1               ; 01:1b
000000r 1               ; 02:0b
000000r 1               ; 03:1b
000000r 1               
000000r 1               .include "sdk/ue14500-tape.inc"
000000r 2               .feature ubiquitous_idents
000000r 2               .feature string_escapes
000000r 2               .setcpu "none"
000000r 2               
000000r 2               ; Real-ish tape data
000000r 2               ;   16 bit data bus, first 4 bits are ignored but stored in
000000r 2               ;   executable in current implementation
000000r 2               ;   8 bit address bus
000000r 2               ;   xxxxIIII DDDDDDDD
000000r 2               ; IO xxNNNNNN (first two bits are masked):
000000r 2               ;   LD/STO  0x30-0x37   IO
000000r 2               ;       STO 0x30     - Trigger to read 1 bit from input - yes/no
000000r 2               ;       LD 0x30      - Read result
000000r 2               ;       STO 0x31     - Write 7 byte ASCII into terminal
000000r 2               ;       STO 0x32     - Break (any value)
000000r 2               ;       0x33-0x37 - Reserved
000000r 2               ;   LD/STO  0x38        QRR
000000r 2               ;   LD/STO  0x39        RR
000000r 2               ;   LD      0x3A-0x3B   High
000000r 2               ;   LD      0x3C-0x3F   Low
000000r 2               
000000r 2               ; 0000 0: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2               ; 0001 1: LD   = Load result register. Data -> RR.
000000r 2               ; 0010 2: ADD  = Addition. D + RR -> RR.
000000r 2               ; 0011 3: SUB  = Subtraction. QD + RR -> RR.
000000r 2               ; 0100 4: ONE  = Force one. 1 -> RR. 0 -> CAR.
000000r 2               ; 0101 5: NAND = Logical NAND. Q(RR * D) -> RR.
000000r 2               ; 0110 6: OR   = Logical OR. RR + D -> RR.
000000r 2               ; 0111 7: XOR  = Exclusive OR. RR != D -> RR.
000000r 2               ; 1000 8: STO  = Store. RR -> Data. Write high if OEN.
000000r 2               ; 1001 9: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2               ; 1010 A: IEN  = Input enable. D -> IEN.
000000r 2               ; 1011 B: OEN  = Output enable. D -> OEN.
000000r 2               ; 1100 C: JMP  = Jump. Jump high.
000000r 2               ; 1101 D: RTN  = Return. RTN high. 1 -> Skip.
000000r 2               ; 1110 E: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2               ; 1111 F: NOPF = No change in registers. RR -> RR. FLGF high.
000000r 2               
000000r 2               .macro nop0 addr   ; 0000: NOP0 = No change in registers. RR -> RR. FLG0 high.
000000r 2                   .byte 0
000000r 2                   .if .blank(addr)
000000r 2                   .byte 0
000000r 2                   .else
000000r 2                   .byte <addr
000000r 2                   .endif
000000r 2               .endmacro
000000r 2               .macro ld addr    ; 0001: LD   = Load result register. Data -> RR.
000000r 2                   .byte 1
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro add addr    ; 0010: ADD  = Addition. D + RR -> RR.
000000r 2                   .byte 2
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro sub addr    ; 0011: SUB  = Subtraction. QD + RR -> RR.
000000r 2                   .byte 3
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro one    ; 0100: ONE  = Force one. 1 -> RR. 0 -> CAR.
000000r 2                   .byte 4
000000r 2                   .byte 0
000000r 2               .endmacro
000000r 2               .macro nand addr   ; 0101: NAND = Logical NAND. Q(RR * D) -> RR.
000000r 2                   .byte 5
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro or addr     ; 0110: OR   = Logical OR. RR + D -> RR.
000000r 2                   .byte 6
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro xor addr    ; 0111: XOR  = Exclusive OR. RR != D -> RR.
000000r 2                   .byte 7
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro sto addr    ; 1000: STO  = Store. RR -> Data. Write high if OEN.
000000r 2                   .byte 8
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro stoc addr   ; 1001: STOC = Store complement. QRR -> Data. Write high if OEN.
000000r 2                   .byte 9
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro ien addr   ; 1010: IEN  = Input enable. D -> IEN.
000000r 2                   .byte 10
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro oen addr   ; 1011: OEN  = Output enable. D -> OEN.
000000r 2                   .byte 11
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro jmp addr   ; 1100: JMP  = Jump. Jump high.
000000r 2                   .byte 12
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               .macro rtn   ; 1101: RTN  = Return. RTN high. 1 -> Skip.
000000r 2                   .byte 13
000000r 2                   .byte 0
000000r 2               .endmacro
000000r 2               .macro skz   ; 1110: SKZ  = Skip if zero. 1 -> Skip if RR == 0.
000000r 2                   .byte 14
000000r 2                   .byte 0
000000r 2               .endmacro
000000r 2               .macro nopf addr  ; 1111: NOPF = No change
000000r 2                   .byte 15
000000r 2                   .byte <addr
000000r 2               .endmacro
000000r 2               
000000r 2               .define OUTREG $28 ; o61
000000r 2               .define INREG $30 ; o60
000000r 2               .define QRR $38 ; o70
000000r 2               .define RR $39 ; o71
000000r 2               .define HIGH $3a ; o72
000000r 2               .define LOW $3c ; o74
000000r 2               .define SHIFTOUT $3c ; o74
000000r 2               .define BRK $3f ; o77
000000r 2               
000000r 2               .macro m_printbyte bits, addr
000000r 2                   .repeat 8,I
000000r 2                       .if (I < bits)
000000r 2                           ld addr+I
000000r 2                           sto OUTREG+I
000000r 2                       .else
000000r 2                           one
000000r 2                           stoc OUTREG+I
000000r 2                       .endif
000000r 2                   .endrepeat
000000r 2                   sto SHIFTOUT
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 2               .macro m_printbyteimm value
000000r 2                   .repeat 8,I
000000r 2                   .if (value & (1 << I)) <> 0
000000r 2                   sto OUTREG+I ; 1
000000r 2                   .else
000000r 2                   stoc OUTREG+I ; 0
000000r 2                   .endif
000000r 2                   .endrepeat
000000r 2                   sto SHIFTOUT
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_print str
000000r 2                   one
000000r 2                   .repeat .strlen(str), I
000000r 2                   __tmp .set .strat(str, I)
000000r 2                   m_printbyteimm __tmp
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_brk
000000r 2                   sto BRK
000000r 2               .endmacro
000000r 2               
000000r 2               ; Assumes RR register is 0 at start
000000r 2               .macro m_programstart
000000r 2                   ien HIGH
000000r 2                   ien	HIGH
000000r 2                   oen HIGH
000000r 2                   oen QRR
000000r 2                   .repeat $30,I
000000r 2                   sto I
000000r 2                   .endrepeat
000000r 2                   .repeat $bf,I
000000r 2                   sto $40+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               ; Must reset RR to 1 to avoid clearing RAM
000000r 2               .macro m_programend
000000r 2                   one
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_save_oen tmpAddr
000000r 2                   one
000000r 2                   sto tmpAddr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_restore_oen tmpAddr
000000r 2                   oen tmpAddr
000000r 2                   one
000000r 2                   stoc tmpAddr ; zero tmpoen if was 1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_clc ; clear carry
000000r 2                   one
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_sec ; set carry
000000r 2                   ld HIGH
000000r 2                   add HIGH
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_ctrr ; transfer carry to RR
000000r 2                   ld LOW
000000r 2                   add LOW
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_load bits, dstAddr, value
000000r 2                   one
000000r 2                   .repeat bits,I
000000r 2                       .if (value & (1 << I)) <> 0
000000r 2                       sto dstAddr+I; 1
000000r 2                       .else
000000r 2                       stoc dstAddr+I; 0
000000r 2                       .endif
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_fill bits, dstAddr, value
000000r 2                   one
000000r 2                   .repeat bits,I
000000r 2                       .if value = 0
000000r 2                       stoc dstAddr+I; 0
000000r 2                       .elseif value = 1
000000r 2                       sto dstAddr+I; 1
000000r 2                       .else
000000r 2                       .out "Value must be 0 or 1"
000000r 2                       .endif
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_cmp bits, targetAddr, compAddr
000000r 2                   ; C: A>=B
000000r 2                   ; !C: A<B
000000r 2                   m_sec
000000r 2                   .repeat bits,I
000000r 2                       ld targetAddr+I
000000r 2                       sub compAddr+I
000000r 2                   .endrepeat
000000r 2                   m_ctrr
000000r 2                   .if .referenced(CFlag)
000000r 2                   sto CFlag
000000r 2                   .endif
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_cmpimmz bits, targetAddr, compValue
000000r 2                   ; C: A>=B
000000r 2                   ; !C: A<B
000000r 2                   ; .out .sprintf("Cmp %d", compValue)
000000r 2                   ; .if .not .referenced(ZFlag)
000000r 2                   ;     .out "Memory for 1 bit with label ZFlag must be defined to use this macro."
000000r 2                   ; .endif
000000r 2                   one
000000r 2                   stoc ZFlag
000000r 2                   m_sec
000000r 2                   .repeat bits,I
000000r 2                       ld targetAddr+I
000000r 2                       .if (compValue & (1 << I)) <> 0
000000r 2                       ; .out "1"
000000r 2                       sub HIGH
000000r 2                       .else
000000r 2                       ; .out "0"
000000r 2                       sub LOW
000000r 2                       .endif
000000r 2                       or ZFlag ; z is 1 if result is 0
000000r 2                       sto ZFlag
000000r 2                   .endrepeat
000000r 2                   .if .referenced(CFlag)
000000r 2                   m_ctrr
000000r 2                   sto CFlag
000000r 2                   ld ZFlag ; z is 1 if carry is 1
000000r 2                   .endif
000000r 2                   stoc ZFlag ; invert z to get 1 if result is 0
000000r 2                   ld ZFlag
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_cmpimm bits, targetAddr, compValue
000000r 2                   ; C: A>=B
000000r 2                   ; !C: A<B
000000r 2                   m_sec
000000r 2                   .repeat bits,I
000000r 2                       ld targetAddr+I
000000r 2                       .if (compValue & (1 << I)) <> 0
000000r 2                       sub HIGH
000000r 2                       .else
000000r 2                       sub LOW
000000r 2                       .endif
000000r 2                   .endrepeat
000000r 2                   m_ctrr
000000r 2                   .if .referenced(CFlag)
000000r 2                   sto CFlag
000000r 2                   .endif
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_subout bits, op1Addr, op2Addr, outAddr
000000r 2                   m_sec
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   sub op2Addr+I
000000r 2                   sto outAddr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_sub bits, op1Addr, op2Addr
000000r 2                   m_subout bits, op1Addr, op2Addr, op1Addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_subimm bits, op1Addr, op2Value
000000r 2                   m_sec
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   .if (op2Value & (1 << I)) <> 0
000000r 2                   sub HIGH
000000r 2                   .else
000000r 2                   sub LOW
000000r 2                   .endif
000000r 2                   sto op1Addr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_asl bits, value
000000r 2                   m_clc
000000r 2                   .repeat bits,I
000000r 2                   ld value+I
000000r 2                   add value+I
000000r 2                   sto value+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_lsr bits, value
000000r 2                   m_clc
000000r 2                   .repeat bits,I
000000r 2                   ld value+(bits-I-1)
000000r 2                   add value+(bits-I-1)
000000r 2                   sto value+(bits-I-1)
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               ; rotate left with carry
000000r 2               .macro m_rol bits, value
000000r 2                   .repeat bits,I
000000r 2                   ld value+I
000000r 2                   add value+I
000000r 2                   sto value+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               ; rotate ror with carry
000000r 2               .macro m_ror bits, value
000000r 2                   .repeat bits,I
000000r 2                   ld value+(bits-I-1)
000000r 2                   add value+(bits-I-1)
000000r 2                   sto value+(bits-I-1)
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_copy bits, srcAddr, dstAddr
000000r 2                   .repeat bits,I
000000r 2                   ld srcAddr+I
000000r 2                   sto dstAddr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_addout bits, op1Addr, op2Addr, outAddr
000000r 2                   m_clc
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   add op2Addr+I
000000r 2                   sto outAddr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_add bits, op1Addr, op2Addr
000000r 2                   m_addout bits, op1Addr, op2Addr, op1Addr
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_adcimm bits, op1Addr, op2Value
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   .if (op2Value & (1 << I)) <> 0
000000r 2                   add HIGH
000000r 2                   .else
000000r 2                   add LOW
000000r 2                   .endif
000000r 2                   sto op1Addr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_xor bits, op1Addr, op2Value
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   .if (op2Value & (1 << I)) <> 0
000000r 2                   xor HIGH
000000r 2                   .else
000000r 2                   xor LOW
000000r 2                   .endif
000000r 2                   sto op1Addr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_addimm bits, op1Addr, op2Value
000000r 2                   m_clc
000000r 2                   .repeat bits,I
000000r 2                   ld op1Addr+I
000000r 2                   .if (op2Value & (1 << I)) <> 0
000000r 2                   add HIGH
000000r 2                   .else
000000r 2                   add LOW
000000r 2                   .endif
000000r 2                   sto op1Addr+I
000000r 2                   .endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro __m_sqr16_iter valueAddr, resultAddr
000000r 2               .scope
000000r 2                   tempsq = scratchpad
000000r 2                   currentbitsq = scratchpad + 8
000000r 2               
000000r 2                   m_asl 8, resultAddr ; low * 2
000000r 2                   m_rol 8, resultAddr+8 ; high * 2 + carry
000000r 2                   m_asl 8, currentbitsq ; shift number byte
000000r 2                   m_ctrr ; read carry
000000r 2                   oen RR ; if carry = 1
000000r 2                   m_add 8, resultAddr, tempsq
000000r 2                   m_adcimm 8, resultAddr+8, 0 ; add carry to result
000000r 2                   oen tmpoen
000000r 2               .endscope
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_sqr16 valueAddr, resultAddr
000000r 2               .scope
000000r 2                   tempsq = scratchpad
000000r 2                   currentbitsq = scratchpad + 8
000000r 2               
000000r 2                   one
000000r 2                   sto tmpoen
000000r 2               
000000r 2                   m_load 8, resultAddr, 0
000000r 2                   m_copy 8, valueAddr, currentbitsq ; save low
000000r 2                   ld valueAddr+15 ; check if negative
000000r 2                   oen RR
000000r 2                   m_xor 8, currentbitsq, $FF ; negate low byte
000000r 2                   m_addimm 8, currentbitsq, 1 ; +1
000000r 2                   oen tmpoen
000000r 2                   m_copy 8, currentbitsq, tempsq ; save low ABS
000000r 2               
000000r 2                   ; do this 8 times
000000r 2                   .repeat 8
000000r 2                   __m_sqr16_iter valueAddr, resultAddr
000000r 2                   .endrepeat
000000r 2               
000000r 2                   oen tmpoen
000000r 2                   one
000000r 2                   stoc tmpoen ; zero tmpoen if was 1
000000r 2               .endscope
000000r 2               .endmacro
000000r 2               
000000r 2               .macro m_mul16 op1Addr, op2Addr, resultAddr
000000r 2               .scope
000000r 2                   tempOp1 = scratchpad
000000r 2                   tempOp2 = tempOp1 + 16
000000r 2                   sign = tempOp2 + 16
000000r 2               
000000r 2                   one ; store current O
000000r 2                   sto tmpoen
000000r 2               
000000r 2                   m_copy 16, op2Addr, tempOp2
000000r 2                   ld tempOp2+15 ; calculate sign
000000r 2                   sto sign
000000r 2                   oen sign ; if negative, invert the number
000000r 2                   m_xor 16, tempOp2, $ffff
000000r 2                   m_addimm 16, tempOp2, 1
000000r 2                   oen tmpoen
000000r 2               
000000r 2                   m_load 16, tempOp1, 0
000000r 2                   m_copy 16, op1Addr, resultAddr
000000r 2                   m_lsr 16, resultAddr
000000r 2                   m_ctrr
000000r 2                   sto CFlag
000000r 2                   ; do this 8 times
000000r 2                   .repeat 16
000000r 2                       ; using oen RR or oen CFlag is bad
000000r 2                       ; because they can be 0 or 1 depending on what ran first
000000r 2                       ; but it's alright here, because when this code runs it doesn't
000000r 2                       ; garble anything, then tmpoen restores the O state
000000r 2                       oen CFlag ; if C = 0
000000r 2                       m_sec
000000r 2                       m_add 16, tempOp1, tempOp2
000000r 2               
000000r 2                       oen tmpoen ; always
000000r 2                       m_clc
000000r 2                       m_ror 16, tempOp1
000000r 2                       m_ror 16, resultAddr
000000r 2                       m_ctrr
000000r 2                       sto CFlag
000000r 2                   .endrepeat
000000r 2               
000000r 2                   oen sign ; negate result if negative
000000r 2                   m_xor 16, resultAddr, $ffff
000000r 2                   m_addimm 16, resultAddr, 1
000000r 2                   oen tmpoen
000000r 2                   one
000000r 2                   stoc tmpoen ; zero tmpoen if was 1
000000r 2               .endscope
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .segment "MEMLOW"
000000r 1               term1 = $00
000000r 1               term2 = $02
000000r 1               sum   = $04
000000r 1               
000000r 1               .segment "CODE"
000000r 1  0A 3A            ien HIGH        ; Init. Enable memory in/out
000002r 1  0A 3A            ien	HIGH
000004r 1  0B 3A            oen HIGH
000006r 1               
000006r 1  0B 38            oen QRR         ; Assuming RR is 0 at reset
000008r 1                                   ; This code will only execute once
000008r 1               
000008r 1  04 00            one             ; Clear carry
00000Ar 1                   ; Assuming little endian bit packing
00000Ar 1  01 00            ld term1+0
00000Cr 1  02 02            add term2+0
00000Er 1  08 04            sto sum+0
000010r 1               
000010r 1  01 01            ld term1+1
000012r 1  02 03            add term2+1
000014r 1  08 05            sto sum+1
000016r 1               
000016r 1  04 00            one             ; Reset RR
000016r 1               
